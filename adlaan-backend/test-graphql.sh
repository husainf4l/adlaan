#!/bin/bash

# üöÄ Adlaan AI Agents - Safe GraphQL Testing Script
# This script provides safe testing examples for your AI agents

echo "ü§ñ Adlaan AI Agents - GraphQL Testing Suite"
echo "=========================================="

# Check if backend is running
echo "üì° Testing GraphQL endpoint..."
if curl -s -X POST http://localhost:4001/api/graphql \
   -H "Content-Type: application/json" \
   -d '{"query":"query { __typename }"}' > /dev/null 2>&1; then
    echo "‚úÖ Backend is running on http://localhost:4001/api/graphql"
else
    echo "‚ùå Backend is not running. Please start with: npm run start:dev"
    exit 1
fi

echo ""
echo "üîê Authentication Required"
echo "========================="
echo "Before testing AI agents, you need a JWT token:"
echo ""
echo "1. Login to get token:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"query\": \"mutation Login(\$input: LoginInput!) { login(input: \$input) { token user { id email } } }\","
echo "    \"variables\": {"
echo "      \"input\": {"
echo "        \"email\": \"your_email@example.com\","
echo "        \"password\": \"your_password\""
echo "      }"
echo "    }"
echo "  }'"
echo ""
echo "2. Set token as environment variable:"
echo "export JWT_TOKEN=\"your_jwt_token_here\""
echo ""

echo "ü§ñ AI Agent Testing Examples"
echo "============================"

echo ""
echo "üìÑ 1. Legal Document Generator"
echo "-----------------------------"
echo "Generate a contract:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer \$JWT_TOKEN\" \\"
echo "  -d '{"
echo "    \"query\": \"mutation GenerateDocument(\$input: GenerateLegalDocumentInput!) { generateLegalDocument(input: \$input) { id type status metadata } }\","
echo "    \"variables\": {"
echo "      \"input\": {"
echo "        \"documentType\": \"CONTRACT\","
echo "        \"title\": \"Service Agreement\","
echo "        \"description\": \"Professional services contract\","
echo "        \"parameters\": \"{\\\"clientName\\\":\\\"John Doe\\\",\\\"startDate\\\":\\\"2024-01-01\\\",\\\"endDate\\\":\\\"2024-12-31\\\",\\\"paymentTerms\\\":\\\"Net 30\\\",\\\"scopeOfWork\\\":\\\"Web development services\\\"}\""
echo "      }"
echo "    }"
echo "  }'"
echo ""

echo "üìä 2. Document Analyzer"
echo "----------------------"
echo "Analyze a document (replace documentId with actual ID):"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer \$JWT_TOKEN\" \\"
echo "  -d '{"
echo "    \"query\": \"mutation AnalyzeDocument(\$input: AnalyzeDocumentInput!) { analyzeDocument(input: \$input) { id type status metadata } }\","
echo "    \"variables\": {"
echo "      \"input\": {"
echo "        \"documentId\": 1,"
echo "        \"analysisType\": \"summary\""
echo "      }"
echo "    }"
echo "  }'"
echo ""

echo "üè∑Ô∏è 3. Document Classifier"
echo "-------------------------"
echo "Classify all unclassified documents:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer \$JWT_TOKEN\" \\"
echo "  -d '{"
echo "    \"query\": \"mutation ClassifyDocuments(\$input: ClassifyDocumentsInput!) { classifyDocuments(input: \$input) { id type status metadata } }\","
echo "    \"variables\": {"
echo "      \"input\": {"
echo "        \"includeUnclassified\": true,"
echo "        \"forceReclassify\": false"
echo "      }"
echo "    }"
echo "  }'"
echo ""

echo "üìã 4. Check Task Status"
echo "----------------------"
echo "Get all agent tasks:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer \$JWT_TOKEN\" \\"
echo "  -d '{"
echo "    \"query\": \"query GetAllAgentTasks { getAllAgentTasks { id type status createdAt completedAt output errorMessage } }\""
echo "  }'"
echo ""

echo "üîç 5. Introspection (Safe Schema Exploration)"
echo "============================================="
echo "Get available types:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"query\": \"query IntrospectionQuery { __schema { types { name kind } } }\""
echo "  }' | jq '.data.__schema.types[] | select(.name | startswith(\\\"Agent\\\")) | .name'"
echo ""

echo "Get available queries:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"query\": \"query { __schema { queryType { fields { name description } } } }\""
echo "  }' | jq '.data.__schema.queryType.fields[] | select(.name | contains(\\\"agent\\\") or contains(\\\"Agent\\\")) | {name, description}'"
echo ""

echo "Get available mutations:"
echo "curl -X POST http://localhost:4001/api/graphql \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"query\": \"query { __schema { mutationType { fields { name description } } } }\""
echo "  }' | jq '.data.__schema.mutationType.fields[] | select(.name | contains(\\\"generate\\\") or contains(\\\"analyze\\\") or contains(\\\"classify\\\")) | {name, description}'"
echo ""

echo "‚ú® Frontend Development Tips"
echo "============================"
echo "‚Ä¢ Use Apollo Client for React integration"
echo "‚Ä¢ Implement polling for task status updates"
echo "‚Ä¢ Add proper error handling and loading states"
echo "‚Ä¢ Create reusable components for each agent"
echo "‚Ä¢ Use TypeScript with GraphQL code generation"
echo ""

echo "üìñ For detailed integration guide, see: FRONTEND_INTEGRATION_GUIDE.md"