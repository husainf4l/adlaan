
Table of Contents
1. Send SMS API: ................................................................................................................. 3
2. Generate Token: .............................................................................................................. 4
3. Get Token: ........................................................................................................................ 5
4. Send SMS: ....................................................................................................................... 6
5. API Types ........................................................................................................................18
❖
This document outlines the steps for integrating your service with JorMall's SMS API. By using this API, you can pass SMS traffic from your platform to JorMall, enabling smooth communication and message delivery.
1. Send SMS API:
Using this web service JorMall clients can send messages to their customers through their SMS account provided by JorMall, for this web service to work user must have the below requirements:
o
User must have an active SMS account with JorMall
o
The SMS account must have SMS balance.
o
The used sender through this web service must be registered by JorMall before its being used.
2. Generate Token:
❖
To authenticate your account with SMS service, generate a token using the following API endpoint:
•
Endpoint:
o
Ruby (Copy Code)
https://www.josms.net/sms/api/GenerateToken.cfm?accname=YOUR_ACCOUNT_NAME&accpass=YOUR_ACCOUNT_PASSWORD
▪
Replace YOUR_ACCOUNT_NAME with your actual account name.
▪
Replace YOUR_ACCOUNT_PASSWORD with your actual account password.
3. Get Token:
❖
To authenticate your account with SMS service, generate a token using the following API endpoint:
•
Endpoint:
o
Ruby (Copy Code)
https://www.josms.net/sms/api/GetToken.cfm?accname=YOUR_ACCOUNT_NAME&accpass=YOUR_ACCOUNT_PASSWORD
▪
Replace YOUR_ACCOUNT_NAME with your actual account name.
▪
Replace YOUR_ACCOUNT_PASSWORD with your actual account password.
4. Send SMS:
❖
Once you have obtained the token, you can send SMS messages using the new API endpoint below. You will need to include the sender ID, recipient's phone numbers, message content, and the generated token.
•
Endpoint:
o
Bash (Copy Code)
https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS?senderid=SENDER_ID&numbers=PHONE_NUMBERS&msg=MESSAGE_CONTENT&id=ID
▪
Replace SENDER_ID with your desired sender name.
▪
Replace PHONE_NUMBERS with the recipient's phone number(s), formatted with the country code.
▪
Replace MESSAGE_CONTENT with the text you wish to send.
▪
Replace ID with your ID (Optional) .
▪
Header Parameter:
-
Variable Name: Authorization
-
Value: Token
❖
Code Examples
o
Below are examples of how to use this API in various programming languages.
➢
C# Example:
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
namespace SMSExample
{
class Program
{
static async Task Main(string[] args)
{
using (var client = new HttpClient())
{
// Set the URL
var url = "https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS";
// Prepare the request content
var requestData = new MultipartFormDataContent
{
{ new StringContent("962*********,"), "numbers" },
{ new StringContent("***********"), "senderid" },
{ new StringContent(@"<DocumentElement>
<msg>
<SMS_ID>1</SMS_ID>
<SMS_BODY>TEST MESSAGE نص 1
عربي </SMS_BODY>
<MOBILE_PHONE>962779916791</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
<msg>
<SMS_ID>2</SMS_ID>
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
</DocumentElement>"), "msgs" }
};
// Add the Authorization header
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "YOUR_VTOKEN");
// Send the POST request
var response = await client.PostAsync(url, requestData);
// Process the response
if (response.IsSuccessStatusCode)
{
var responseContent = await response.Content.ReadAsStringAsync();
Console.WriteLine("Response: " + responseContent);
}
else
{
Console.WriteLine("Error: " + response.StatusCode);
}
}
}
}
}
•
Java Example:
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
public class SendSMS {
public static void main(String[] args) {
try {
// URL for the request
URL url = new URL("https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS");
HttpURLConnection connection = (HttpURLConnection) url.openConnection();
// Set up the connection properties
connection.setRequestMethod("POST");
connection.setDoOutput(true);
connection.setRequestProperty("Authorization", "Bearer YOUR_VTOKEN");
connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
// Prepare the request body
String numbers = "962*********,";
String senderId = "**********";
String msgs = "<DocumentElement>"
+ "<msg>"
+ "<SMS_ID>1</SMS_ID>"
+ "<SMS_BODY>TEST MESSAGE 1 نص عربي </SMS_BODY>"
+ "<MOBILE_PHONE>962779916791</MOBILE_PHONE>"
+ "<BULK_ID>1</BULK_ID>"
+ "</msg>"
+ "<msg>"
+ "<SMS_ID>2</SMS_ID>"
+ "<SMS_BODY>TEST MESSAGE 2</SMS_BODY>"
+ "<MOBILE_PHONE>962779916791</MOBILE_PHONE>"
+ "<BULK_ID>1</BULK_ID>"
+ "</msg>"
+ "</DocumentElement>";
// Format the data as a form-urlencoded body
String urlParameters = "numbers=" + numbers + "&senderid=" + senderId + "&msgs=" + msgs;
byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);
// Write the request data to the output stream
try (OutputStream outputStream = connection.getOutputStream()) {
outputStream.write(postData);
}
// Send the request and read the response
int responseCode = connection.getResponseCode();
if (responseCode == HttpURLConnection.HTTP_OK) {
System.out.println("Request sent successfully.");
} else {
System.out.println("Failed to send request. Response Code: " + responseCode);
}
} catch (Exception e) {
e.printStackTrace();
}
}
}
•
VB.NET Example:
Imports System.Net.Http
Imports System.Net.Http.Headers
Imports System.Threading.Tasks
Module Program
Sub Main(args As String())
Task.Run(Function() SendSMSRequest()).Wait()
End Sub
Private Async Function SendSMSRequest() As Task
Using client As New HttpClient()
' Set the URL
Dim url As String = "https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS"
' Prepare the request content
Dim requestData As New MultipartFormDataContent()
requestData.Add(New StringContent("962*********,"), "numbers")
requestData.Add(New StringContent("***********"), "senderid")
requestData.Add(New StringContent("<DocumentElement>
<msg>
<SMS_ID>1</SMS_ID>
<SMS_BODY>TEST MESSAGE 1 نص عربي </SMS_BODY>
<MOBILE_PHONE>************</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
<msg>
<SMS_ID>2</SMS_ID>
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>
<MOBILE_PHONE>************</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
</DocumentElement>"), "msgs")
' Add the Authorization header
client.DefaultRequestHeaders.Authorization = New AuthenticationHeaderValue("Bearer", "YOUR_VTOKEN")
' Send the POST request
Dim response As HttpResponseMessage = Await client.PostAsync(url, requestData)
' Process the response
If response.IsSuccessStatusCode Then
Dim responseContent As String = Await response.Content.ReadAsStringAsync()
Console.WriteLine("Response: " & responseContent)
Else
Console.WriteLine("Error: " & response.StatusCode)
End If
End Using
End Function
End Module
•
AJAX Example:
// Define the request URL and body parameters
const url = "https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS";
const headers = {
"Content-Type": "application/x-www-form-urlencoded",
"Authorization": "Bearer YOUR_VTOKEN" // Replace with actual token
};
const body = new URLSearchParams({
"numbers": "962*********,",
"senderid": "***********",
"msgs": `<DocumentElement>
<msg>
<SMS_ID>1</SMS_ID>
<SMS_BODY>TEST MESSAGE 1 نص
عربي </SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
<msg>
<SMS_ID>2</SMS_ID>
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
</DocumentElement>`
});
// Send the AJAX request
fetch(url, {
method: "POST",
headers: headers,
body: body
})
.then(response => response.text()) // Use .json() if the response is JSON
.then(data => {
console.log("Response:", data);
})
.catch(error => {
console.error("Error:", error);
});
•
JSON Example:
{
"url": "https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS",
"method": "POST",
"headers": {
"Authorization": "Bearer YOUR_VTOKEN",
"Content-Type": "application/json"
},
"body": {
"numbers": "962*********,",
"senderid": "***********",
"msgs": "<DocumentElement>\
<msg>\
<SMS_ID>1</SMS_ID>\
<SMS_BODY>TEST MESSAGE 1 نص
عربي </SMS_BODY>\
<MOBILE_PHONE>962*********</MOBILE_PHONE>\
<BULK_ID>1</BULK_ID>\
</msg>\
<msg>\
<SMS_ID>2</SMS_ID>\
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>\
<MOBILE_PHONE>962*********</MOBILE_PHONE>\
<BULK_ID>1</BULK_ID>\
</msg>\
</DocumentElement>"
}
}
•
XML Example:
<request>
<url>https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS</url>
<method>POST</method>
<headers>
<header name="Authorization">Bearer YOUR_VTOKEN</header>
</headers>
<body>
<numbers>962*********,</numbers>
<senderid>***********</senderid>
<msgs>
<DocumentElement>
<msg>
<SMS_ID>1</SMS_ID>
<SMS_BODY>TEST MESSAGE 1 نص
عربي </SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
<msg>
<SMS_ID>2</SMS_ID>
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
</DocumentElement>
</msgs>
</body>
</request>
•
PHP Example:
<?php
// Set the target URL
$url = "https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS";
// Prepare the POST data
$data = [
"numbers" => "962*********,",
"senderid" => "***********",
"msgs" => "<DocumentElement>
<msg>
<SMS_ID>1</SMS_ID>
<SMS_BODY>TEST MESSAGE 1 نص
عربي </SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
<msg>
<SMS_ID>2</SMS_ID>
<SMS_BODY>TEST MESSAGE 2</SMS_BODY>
<MOBILE_PHONE>962*********</MOBILE_PHONE>
<BULK_ID>1</BULK_ID>
</msg>
</DocumentElement>"
];
// Initialize cURL
$ch = curl_init($url);
// Set cURL options
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
"Authorization: Bearer YOUR_VTOKEN"
]);
// Execute the request
$response = curl_exec($ch);
// Check for errors
if ($response === false) {
echo "cURL Error: " . curl_error($ch);
} else {
echo "Response: " . $response;
}
// Close cURL
curl_close($ch);
?>
5. API Types
❖
One By One Method
•
Sending One by One Messages OTP Only
o
Description:
▪
This gateway used to send OTP messages to only one mobile number.
o
Gateway Link:
https://www.josms.net/SMSServices/Clients/Prof/SingleSMS3/SMSService.asmx/SendSMS?senderid=******&numbers=9627********&msg=SMSBODY&id=
o
Gateway Link (Rest API):
https://www.josms.net/SMSServices/Clients/Prof/RestSingleSMS3/SendSMS?senderid=******&numbers=9627********&msg=SMSBODY&id=
•
Sending One by One Messages General
o
Description:
▪
This gateway used to send “General” messages to only one mobile number.
o
Gateway Link:
https://www.josms.net/SMSServices/Clients/Prof/SingleSMS_General3/SMSService.asmx/SendSMS?senderid=******&numbers=9627********&msg=SMSBODY&id=
o
Gateway Link (Rest API):
https://www.josms.net/SMSServices/Clients/Prof/RestSingleSMS_General3/SendSMS?senderid=******&numbers=9627********&msg=SMSBODY&id=
➢
SendSMS Operation
This operation used to send a message to only one recipient in each call through a pre-registered sender from client SMS account.
o
Operation Name: SendSMS
o
Operation type: Request-response
➢
Input parameters: Parameter Name Type Presence Description senderid string mandatory A sender name for the message which must be registered by ‘SMS Provider’ before its being used and it can’t be more than 11 characters including spaces.
numbers
string
mandatory
The recipient mobile number written in the following format 9627XXXXXXXX msg string mandatory The text of the message you want to send and it must be URL encoded
id
string
optional
An optional id sent from client side used to track the message from ‘SMS Provider’ side and also used to ignore any duplicate messages sent with the same id, note that parameter must be passed as empty string if not needed
➢
Output parameter:
SendSMSResponse
SendSMSResult - type string
Results will be one of the following: Result Text Status Description Invalid Sender ID Failure The passed value for the senderid parameter is not considered as a registered sender name from ‘SMS Provider’ for this SMS account.
Message Ignored, Duplicate ID
Failure
The passed value for the id parameter has been passed before by the same client Invalid Mobile Number Failure The passed value for numbers parameter does not consider as a valid Jordanian mobile number
Error exists please try again
Failure
In case of any error occurred during the call of the API MsgID = xxxxxxxx Success Where xxxxx is a reference number from ‘SMS Provider’ which means that the message was accepted from ‘SMS Provider’ and will be sent to the recipient mobile number shortly
❖
Sending Bulk Method
•
Sending Bulk Messages
o
Description:
▪
This API used to send messages to more than one recipient in each call through a pre-registered sender from client SMS account for up to 120 recipients’ mobile numbers.
o
Gateway Link:
https://www.josms.net/sms/api/SendBulkMessages3.cfm?numbers=9627********,9627********,&senderid=*********&msg=SMSBody&requesttimeout=5000000
➢
Parameters:
Parameter Name Type Presence Description senderid string mandatory A sender name for the message which must be registered by ‘SMS Provider’ before its being used and it can’t be more than 11 characters including spaces. numbers string mandatory Recipient mobile numbers written in the following format 9627XXXXXXXX in a comma separated format. Recipient mobile number must start with 962 then followed by operator code (77 ,78 or 79). Recipient mobile number must not have any special characters like + or dot. Recipient mobile number must be of length 12 characters Ex. 962775444418,962779937272 msg string mandatory The text of the message you want to send and it must be URL encoded request timeout string optional An optional integer number of seconds, if 0 value specified, timeout will be disabled for the request.
➢
Response:
Result Text Status Description Error Invalid Sender ID The passed value for the senderid parameter does not consider as a registered sender name for this SMS account.
Error
Invalid Number
All passed recipients’ mobile numbers are invalid, not in the correct format of 9627XXXXXXXX Error Connection Failed, please try again There is a temporary problem from ‘SMS Provider’ side, message has not been submitted.
Success
A reference number from SMS Provider
MsgID =xxxxxxx
If the result contains a reference number from the ‘SMS Provider’ this means that the message was accepted from ‘SMS Provider’ and will be sent to the recipient mobile number shortly