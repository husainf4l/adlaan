// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String
  password        String? // Optional for OAuth users
  avatar          String?
  provider        AuthProvider @default(LOCAL)
  providerId      String?
  isEmailVerified Boolean      @default(false)

  // Phone and 2FA settings
  phoneNumber      String? // Optional phone number
  isPhoneVerified  Boolean @default(false)
  twoFactorEnabled Boolean @default(false) // User can enable/disable 2FA

  // Company relationship
  companyId String? // Optional - user can exist without a company initially
  company   Company? @relation(fields: [companyId], references: [id])

  // Company ownership - for users who own companies
  ownedCompanies Company[] @relation("CompanyOwner")

  // Document relationships
  createdDocuments    DocumentItem[]       @relation("DocumentCreatedBy")
  modifiedDocuments   DocumentItem[]       @relation("DocumentModifiedBy")
  documentPermissions DocumentPermission[]
  documentVersions    DocumentVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Company model
model Company {
  id          String  @id @default(cuid())
  name        String
  nameEn      String? // English company name
  description String?
  logo        String?
  email       String? @unique
  phone       String?
  address     String?
  addressEn   String? // English address
  website     String?
  
  // Additional profile fields
  taxNumber           String? // Tax registration number
  commercialRegister  String? // Commercial register number

  // Company owner/creator
  ownerId String
  owner   User   @relation("CompanyOwner", fields: [ownerId], references: [id])

  // Company members/employees
  members User[]

  // Subscription relationship
  subscriptionId String?       @unique
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  // Document relationship
  documents DocumentItem[]
  
  // Document layouts relationship
  documentLayouts DocumentLayout[]

  // Company settings
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

// Document Layout model
model DocumentLayout {
  id             String @id @default(cuid())
  name           String
  headerTemplate String @db.Text // HTML template for document header
  footerTemplate String @db.Text // HTML template for document footer
  margins        Json   // Object containing top, bottom, left, right margins in pixels
  fontSize       Int    @default(14) // Font size in pixels
  fontFamily     String @default("Arial, sans-serif") // Font family CSS value
  isDefault      Boolean @default(false) // Whether this is the default layout
  isActive       Boolean @default(true) // Soft delete flag

  // Company relationship
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("document_layouts")
}

// Subscription model
model Subscription {
  id     String             @id @default(cuid())
  plan   SubscriptionPlan   @default(FREE)
  status SubscriptionStatus @default(ACTIVE)

  // Billing cycle
  billingCycle BillingCycle @default(MONTHLY)
  amount       Float        @default(0) // Amount in USD
  currency     String       @default("USD")

  // Subscription period
  startDate       DateTime  @default(now())
  endDate         DateTime? // null for lifetime/free plans
  nextBillingDate DateTime? // null for free plans

  // Trial information
  trialStartDate DateTime?
  trialEndDate   DateTime?
  isTrialActive  Boolean   @default(false)

  // Payment information
  stripeCustomerId     String?
  stripeSubscriptionId String?

  // Features and limits
  maxUsers            Int     @default(5) // Max users for free plan
  maxProjects         Int     @default(3) // Max projects for free plan
  maxStorage          Int     @default(1000) // Storage limit in MB
  hasAdvancedFeatures Boolean @default(false)
  hasPrioritySupport  Boolean @default(false)

  // Company relationship
  company Company?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// OTP model for phone number verification
model Otp {
  id          String   @id @default(cuid())
  phoneNumber String
  code        String
  type        OtpType
  expiresAt   DateTime
  used        Boolean  @default(false)
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())

  @@map("otps")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum OtpType {
  EMAIL_VERIFICATION
  LOGIN_VERIFICATION
  PASSWORD_RESET
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum BillingCycle {
  MONTHLY
  YEARLY
  LIFETIME
}

// Document Management Models
model DocumentItem {
  id       String           @id @default(cuid())
  name     String
  type     DocumentItemType
  parentId String?

  // Hierarchy relationship
  parent   DocumentItem?  @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children DocumentItem[] @relation("DocumentHierarchy")

  // File-specific fields (only for files)
  size         BigInt?
  mimeType     String?
  extension    String?
  checksum     String?
  version      Int?     @default(1)
  isLocked     Boolean? @default(false)
  downloadUrl  String?
  previewUrl   String?
  thumbnailUrl String?

  // Storage information (for files stored in S3)
  s3Key String? // S3 object key for file operations

  // Folder-specific fields (only for folders)
  color       String?
  description String?

  // Common metadata
  path         String
  documentType DocumentType? @default(OTHER)
  isStarred    Boolean       @default(false)
  isShared     Boolean       @default(false)
  tags         String[]

  // User relationships
  createdById      String
  lastModifiedById String
  createdBy        User   @relation("DocumentCreatedBy", fields: [createdById], references: [id])
  lastModifiedBy   User   @relation("DocumentModifiedBy", fields: [lastModifiedById], references: [id])

  // Company relationship
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Permissions
  permissions DocumentPermission[]

  // File versions (for files only)
  versions DocumentVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("document_items")
}

model DocumentPermission {
  id     String                 @id @default(cuid())
  itemId String
  userId String
  role   DocumentPermissionRole

  item DocumentItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([itemId, userId])
  @@map("document_permissions")
}

model DocumentVersion {
  id       String  @id @default(cuid())
  itemId   String
  version  Int
  size     BigInt
  checksum String
  url      String
  comment  String?

  item      DocumentItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdBy User         @relation(fields: [createdById], references: [id])

  createdById String
  createdAt   DateTime @default(now())

  @@unique([itemId, version])
  @@map("document_versions")
}

enum DocumentItemType {
  FILE
  FOLDER
}

enum DocumentType {
  CONTRACT
  INVOICE
  PROPOSAL
  REPORT
  PRESENTATION
  SPREADSHEET
  IMAGE
  PDF
  OTHER
}

enum DocumentPermissionRole {
  OWNER
  EDITOR
  VIEWER
}
